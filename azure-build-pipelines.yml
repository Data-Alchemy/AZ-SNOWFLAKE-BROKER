# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- none

variables:
  environment : ''

pool:
  vmImage: ubuntu-latest
strategy:
  matrix:
    Python38:
      python.version: '3.8'

steps:
- task: DownloadSecureFile@1
  inputs:
    secureFile: 'snowflake.json'


- task: CopyFiles@2
  inputs:
    SourceFolder: $(Agent.TempDirectory)
    Contents: 'snowflake.json'
    TargetFolder: $(Build.SourcesDirectory)/env

- task: DownloadSecureFile@1
  inputs:
    secureFile: 'az.env'

- task: CopyFiles@2
  inputs:
    SourceFolder: $(Agent.TempDirectory)
    Contents: 'az.env'
    TargetFolder: $(Build.SourcesDirectory)/env


- task: UsePythonVersion@0
  inputs:
    versionSpec: '$(python.version)'
  displayName: 'Use Python $(python.version)'

- script: |
    python -m pip install --upgrade pip
    pip install poetry
    pip install pytest pytest-azurepipelines
  displayName: 'Install ini dependencies'

- script: |
    poetry --version
  displayName: 'Test Poetry'

- script: |
    poetry install
  displayName: 'install app dependencies'

- task: Bash@3
  inputs:
    targetType: 'inline'
    script: |     
      az --version
  displayName: 'test cli cmd'

- task: Bash@3
  inputs:
    targetType: 'inline'
    script: |     
      ls env
  displayName: 'check env files'
- task: Bash@3
  inputs:
    targetType: 'inline'
    script: |
      az login --output none --service-principal -u $(_client_id) -p $(_client_secret) --tenant $(_tenant) --only-show-errors
      poetry run python __main__.py
    displayName: 'test cli'


